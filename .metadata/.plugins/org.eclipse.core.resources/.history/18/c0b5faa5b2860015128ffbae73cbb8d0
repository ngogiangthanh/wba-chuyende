package actions;

import java.sql.ResultSetMetaData;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.apache.struts2.ServletActionContext;

import com.mysql.jdbc.ResultSet;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

import connection.Connect;
import hash.md5;
import models.role;

public class LoginAction extends ActionSupport {

	private static final long serialVersionUID = 1L;
	private String username;
	private String password;
	private Connect conn;
	private md5 hash;
	private String pageDirect = null;

	public LoginAction() {
	}

	public String authenticate() {
		try {
			Home home = new Home();
			if (home.checkLogin()) {
				System.out.println("Không phải login lại!");
				String result = home.getIndex();
				this.setPageDirect(home.getPageDirect());
				return result;
			}

			this.conn = new Connect();
			hash = new md5(this.getPassword());
			hash.generator();
			String sql = "SELECT * FROM tk WHERE username = '" + this.getUsername() + "' and password ='"
					+ hash.getMd5_string_result() + "'";

			ResultSet rs = this.conn.excuteQuery(sql);
			if (rs.next()) {
				DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
				Calendar cal = Calendar.getInstance();
				sql = null;
				long id_cb = rs.getInt("ID_CB");
				if (!rs.wasNull()) {
					// Lấy thông tin cán bộ đăng nhập
					sql = "SELECT cb.ID, " + "cb.MSCB, " + "cb.HO_TEN, " + "cb.GIOI_TINH, " + "cb.NGAY_SINH, "
							+ "cb.PHONG_BAN, " + "khoa.KHOA " + "FROM cb " + "INNER JOIN khoa ON khoa.ID = cb.ID_KHOA "
							+ "WHERE cb.ID = " + id_cb;
				} else {
					// Lấy thông tin sinh viên đăng nhập
					long id_sv = rs.getInt("ID_SV");
					sql = "SELECT sv.MSSV, sv.HO_TEN, sv.GIOI_TINH, sv.NGAY_SINH, lop.LOP, lop.TEN_LOP, cn.CHUYEN_NGANH, khoa.KHOA, sv.ID FROM sv INNER JOIN lop ON lop.ID = sv.ID_LOP INNER JOIN khoa ON khoa.ID = sv.ID_KHOA INNER JOIN cn ON cn.ID = sv.ID_CN WHERE sv.ID = "
							+ id_sv;
				}

				ResultSet information = this.conn.excuteQuery(sql);
				Map<String, String> infor_user = new HashMap<String, String>();
				ResultSetMetaData meta = information.getMetaData();

				if (information.next()) {
					int columns = meta.getColumnCount();
					for (int i = 1; i <= columns; i++) {
						String key = meta.getColumnName(i);
						String value = information.getString(key);
						infor_user.put(key, value);
					}
				}

				Map<String, Object> session = ActionContext.getContext().getSession();
				session.put("information", infor_user);

				String[] rl = rs.getString("ROLE").split(",");

				String[] names = { "Nhóm quyền sinh viên", "Nhóm quyền giảng viên", "Nhóm quyền đv quản lý ngành",
						"Nhóm quyền phòng đào tạo", "Nhóm quyền administrator" };
				String[] roles = { "sv-index", "gv-index", "qldvn-index", "pdt-index", "admin-index" };
				String[] indexes = { "/WEB-INF/freemarker/sv/index.jsp", "/WEB-INF/freemarker/gv/index.jsp",
						"/WEB-INF/freemarker/qldvn/index.jsp", "/WEB-INF/freemarker/pdt/index.jsp",
						"/WEB-INF/freemarker/admin/index.jsp" };

				Map<String, role> infor_roles = new HashMap<String, role>();

				for (int i = 0; i < rl.length; i++)
					infor_roles.put(roles[Integer.parseInt(rl[i])],
							new role(names[Integer.parseInt(rl[i])], indexes[Integer.parseInt(rl[i])]));

				session.put("logined", "true");
				session.put("roles", infor_roles);
				session.put("username", this.getUsername());
				session.put("time", dateFormat.format(cal.getTime()));

				addActionMessage("Đăng nhập thành công!");
				rs.close();
				this.conn.Close();

				System.out.println("Phải login lại!");

				if (rl.length == 1) {
					setPageDirect(indexes[Integer.parseInt(rl[0])]);
					return "directing_page";
				} else
					return "welcome";
			} else {
				addActionError("Tài khoản hoặc mật khẩu không chính xác!");
				return "error";
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			// return "switch";
			return "error";
		}
	}

	public void validate() {
		try {
			System.out.println("Kiểm tra các biến!");
			if (getUsername().length() <= 0 | getUsername().length() > 8) {
				addActionError("Tài khoản không chính xác!");
			}

			if (getPassword().length() <= 0) {
				addActionError("Mật khẩu không chính xác!");
			}
		} catch (Exception ex) {
			System.out.println("Lỗi kiểm tra các biến!");
			ex.printStackTrace();
		}
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getPageDirect() {
		return pageDirect;
	}

	public void setPageDirect(String pageDirect) {
		this.pageDirect = pageDirect;
	}
}
