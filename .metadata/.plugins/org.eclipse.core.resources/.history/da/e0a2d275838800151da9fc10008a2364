package actions;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import com.mysql.jdbc.ResultSet;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

import connection.Connect;
import models.role;

public class Home extends ActionSupport {
	private static final long serialVersionUID = 1L;
	private String pageDirect = null;
	public static String[] names = { "Sinh viên", "Giảng viên", "Quản lý ngành","Phòng đào tạo", "Administrator" };
	public static String[] roles = { "sv-index", "gv-index", "qldvn-index", "pdt-index", "admin-index" };
	public static String[] indexes = { "/WEB-INF/freemarker/sv/index.jsp", "/WEB-INF/freemarker/gv/index.jsp",
			"/WEB-INF/freemarker/qldvn/index.jsp", "/WEB-INF/freemarker/pdt/index.jsp",
			"/WEB-INF/freemarker/admin/index.jsp" };

	@SuppressWarnings("unchecked")
	public String getIndex() {
		Map<String, Object> session = ActionContext.getContext().getSession();
		try {
			if (this.isLogin(session)) {
				Map<String, role> infor_roles = (Map<String, role>) session.get("roles");
				if (infor_roles.size() == 1) {
					System.out.println("Đã login đưa về trang login 1 nhóm quyền!");
					this.getFirstEntryInSession(infor_roles);
					return "directing_page";
				} else {
					System.out.println("Đã login đưa về trang login nhiều nhóm quyền!");
					return "welcome";
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("Lỗi! Xóa session hiện tại! Đưa về trang login!");
			session.clear();
			return "login";
		}
		
		System.out.println("Chưa login đưa về trang login!");
		return "login";
	}

	public void getFirstEntryInSession(Map<String, role> infor_roles) {
		Map.Entry<String, role> entry = infor_roles.entrySet().iterator().next();
		role value = entry.getValue();
		setPageDirect(value.getFreemarker_page());
	}

	public boolean isLogin(Map<String, Object> session) {
		try {
			String value = (String) session.get("logined");
			if (value != null) {
				return true;
			} else {
				if (session.containsKey("logined")) {
					return true;
					// Okay, there's a key but the value is null
				} else {
					// Definitely no such key
					return false;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
	}
	
	public static boolean isRole(Map<String, Object> session, int i){
		try{
			Map<String, role> infor_roles = (Map<String, role>) session.get("roles");
			System.out.println("Nhóm quyền "+ Home.roles[i]);
			return infor_roles.containsKey(Home.roles[i]);
		}
		catch(Exception ex)
		{
			System.out.println("Lỗi check nhóm quyền");
			return false;
		}
	}

	public void assignHKNKValues(Map<String, Object> session, Connect conn) {
		// Ý tưởng tạo ra 1 session chứa thông tin các hk nk. Chỉ tạo một lần
		// duy nhất lúc người dùng gọi lần đầu
		conn = new Connect();
		String procedure = "call get_tt_hk_nk();";
		Map<String, ArrayList<Integer>> hknk = new HashMap<String, ArrayList<Integer>>();
		int first = 1;
		try {
			ResultSet rs = conn.call_procedure(procedure);
			while (rs.next()) {
				String nk = rs.getString("NK");
				ArrayList<Integer> list_hk;
				if (hknk.containsKey(nk)) {
					// Thêm cũ
					System.out.println("Thêm cũ hknk");
					list_hk = hknk.get(nk);
				} else {
					// Thêm mới
					System.out.println("Thêm mới hknk");
					list_hk = new ArrayList<Integer>();
				}
				Integer hk = rs.getInt("HK");
				list_hk.add(hk);
				hknk.put(nk, list_hk);
				// Mặc định học kỳ hiện tại là học kỳ gần nhất, dòng đầu tiên
				// của kết quả truy vấn
				if (first == 1) {
					session.put("current_hk", hk);
					session.put("current_nk", nk);
					this.setHk(hk + "");
					this.setNk(nk);
					first++;
				}
			}
			// Đóng kết nối
			rs.close();
			this.conn.Close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		// Thêm vào session
		session.put("hknk", hknk);
	}
	
	public String getPageDirect() {
		return pageDirect;
	}

	public void setPageDirect(String pageDirect) {
		this.pageDirect = pageDirect;
	}
}
